import {
  fetchProposals,
  ProposalData,
  voteForProposal,
} from '@/api/proposalsApi';
import { withAsync } from '@/helpers/withAsync';
import { useState } from 'react';
import { useApiStatus } from '@/api/hooks/useApiStatus';
import { IDLE, PENDING, SUCCESS, ERROR } from '@/api/constants/apiStatus';
import ProposalList from './ProposalList';
import { Spinner } from './common/Spinner';
import Paragraph from './common/Paragraph';

const useFetchProposals = () => {
  const [proposals, setProposals] = useState<ProposalData[]>([]);
  const {
    status: proposalStatus,
    setStatus: setProposalStatus,
    isIdle: isFetchProposalStatusIdle,
    isPending: isFetchProposalStatusPending,
    isError: isFetchProposalStatusError,
    isSuccess: isFetchProposalDogStatusSuccess,
  } = useApiStatus(IDLE);
  const fetchProposalsData = async () => {
    try {
      setProposalStatus(PENDING);
      const { response, error } = await withAsync(() => fetchProposals());
      if (error) {
        setProposalStatus(ERROR);
      } else if (response) {
        setProposals(response.data.proposals);
        setProposalStatus(SUCCESS);
      }
    } catch (error) {
      // Handle error if fetchProposals() fails
      console.error('Failed to fetch proposals:', error);
      setProposalStatus('ERROR');
    }
  };

  // useEffect(() => {
  //   fetchProposalsData();
  // }, []);

  return {
    proposalStatus,
    proposals,
    fetchProposalsData,
    isFetchProposalStatusIdle,
    isFetchProposalStatusPending,
    isFetchProposalStatusError,
    isFetchProposalDogStatusSuccess,
  };
};

function ProposalComponent() {
  const { proposals, fetchProposalsData, proposalStatus } = useFetchProposals();
  const [errorMessage, setErrorMessage] = useState('');
  const [votedProposals, setVotedProposals] = useState<Record<string, boolean>>(
    {}
  );

  const [voteStatus, setVoteStatus] = useState<
    Record<string, 'idle' | 'pending' | 'success' | 'error'>
  >({});
  const [showConfetti, setShowConfetti] = useState(false);

  const handleVote = async (
    proposalId: string,
    voteOption: boolean
  ): Promise<void> => {
    try {
      const { response, error } = await withAsync(() =>
        voteForProposal(proposalId, voteOption)
      );
      if (error) {
        setErrorMessage(
          'Failed to vote Maybe you tried voting this proposal already?'
        );
        setVoteStatus((voteStatus) => ({
          ...voteStatus,
          [proposalId]: 'error',
        }));
        console.error('Failed to vote:', ERROR);
      } else if (response) {
        setShowConfetti(true);
        setTimeout(() => setShowConfetti(false), 7000);
        setVotedProposals({ ...votedProposals, [proposalId]: true }); // update votedProposals}
        setVoteStatus((voteStatus) => ({
          ...voteStatus,
          [proposalId]: 'success',
        }));
        fetchProposalsData();
      }
    } catch (error) {
      setErrorMessage(
        'Failed to vote Maybe you tried voting this same proposal?'
      );
      setVoteStatus((voteStatus) => ({ ...voteStatus, [proposalId]: 'error' }));
      console.error('Failed to vote:', error);
    }
  };

  return (
    <div className='my-8 mx-auto max-w-2xl'>
      {/* Render your proposals */}
      <div className='flex justify-center'>
        {proposalStatus === 'IDLE' && (
          <Paragraph description="We're building a full-stack solution for a Decentralized Autonomous Organization (DAO) that seeks to empower its token holders. This solution includes smart contracts, allowing ERC20 token holders to vote on proposals generated by an administrator. The admin can create new proposals on-chain with specific details, such as title, description, proposal deadline, minimum votes, and voting options. A backend module will keep track of all proposals, sync them up, and serve necessary information via a REST API. The frontend application lists all proposals and their status (pending, closed, finished, option A won, or option B won), and provides an interface for voting on these proposals. Join us in revolutionizing DAO governance." />
        )}
        {proposalStatus === 'PENDING' && <Spinner></Spinner>}
        {proposalStatus === 'ERROR' && <p>There was a problem</p>}
        {proposalStatus === 'SUCCESS' && (
          <>
            <ProposalList
              proposals={proposals}
              handleVote={handleVote}
              votedProposals={votedProposals}
              errorMessage={errorMessage}
              voteStatus={voteStatus}
              showConfetti={showConfetti}
            ></ProposalList>
          </>
        )}
      </div>

      <button
        onClick={fetchProposalsData}
        className='mt-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-500 ease-in-out transform hover:-translate-y-1 hover:scale-110'
      >
        View Latest Proposals
      </button>
    </div>
  );
}

export default ProposalComponent;
